# Django Language Server Diagnostic Rules
#
# This file defines all diagnostic rules used by the Django Language Server.
# It serves as the single source of truth for diagnostic codes, their meanings,
# and related metadata. Code generation tools use this file to:
# - Generate Rust code for diagnostic mappings
# - Generate documentation for users
#
# DO NOT manually edit the generated code. Edit this file instead.
#
# Format notes:
# - error_type can contain multiple variants separated by | for rules that map
#   multiple error types to the same diagnostic code (e.g., S104)

# Template Parsing Errors (T-series)
# These are errors that occur during the parsing phase of template processing.

[[rule]]
code = "T100"
category = "template"
error_type = "TemplateError::Parser"
name = "Parser Error"
description = "Template syntax error encountered during parsing"
severity = "error"
explanation = """
This error occurs when the template parser encounters invalid Django template syntax.
Common causes include:
- Malformed template tags (e.g., missing closing braces)
- Invalid variable syntax
- Unclosed strings or comments
- Unexpected characters in template expressions

Example:
```django
{# This will cause a parser error
{{ variable | filter: invalid }}
```
"""

[[rule]]
code = "T900"
category = "template"
error_type = "TemplateError::Io"
name = "IO Error"
description = "File system or I/O error while processing template"
severity = "error"
explanation = """
This error occurs when the language server encounters file system or I/O issues
while processing templates. Common causes include:
- Permission issues reading template files
- Missing or deleted template files
- File system access errors
- Network issues if templates are on remote storage
"""

[[rule]]
code = "T901"
category = "template"
error_type = "TemplateError::Config"
name = "Configuration Error"
description = "Template configuration error"
severity = "error"
explanation = """
This error indicates a problem with the template configuration. Common causes include:
- Invalid settings in Django template configuration
- Misconfigured template loaders
- Issues with template directories
- Invalid template engine settings
"""

# Semantic Validation Errors (S-series)
# These are errors detected during semantic analysis of valid template syntax.

[[rule]]
code = "S100"
category = "semantic"
error_type = "ValidationError::UnclosedTag"
name = "Unclosed Tag"
description = "Template tag is not properly closed"
severity = "error"
explanation = """
This error occurs when a template tag is opened but never closed. Django template
tags that require closing include blocks like `{% if %}`, `{% for %}`, `{% block %}`,
etc.

Example:
```django
{% if user.is_authenticated %}
    Welcome, {{ user.username }}!
{# Missing {% endif %} here
```

Fix:
```django
{% if user.is_authenticated %}
    Welcome, {{ user.username }}!
{% endif %}
```
"""

[[rule]]
code = "S101"
category = "semantic"
error_type = "ValidationError::UnbalancedStructure"
name = "Unbalanced Structure"
description = "Template structure has mismatched opening and closing tags"
severity = "error"
explanation = """
This error occurs when template block structures are not properly balanced. For example,
opening a block with `{% if %}` but closing with `{% endfor %}` instead of `{% endif %}`.

Example:
```django
{% if condition %}
    <div>Content</div>
{% endfor %}  {# Wrong closing tag! #}
```

Fix:
```django
{% if condition %}
    <div>Content</div>
{% endif %}
```
"""

[[rule]]
code = "S102"
category = "semantic"
error_type = "ValidationError::OrphanedTag"
name = "Orphaned Tag"
description = "Closing tag without corresponding opening tag"
severity = "error"
explanation = """
This error occurs when a closing tag appears without a matching opening tag. This
usually happens when:
- A closing tag is present but the opening tag is missing
- Tags are closed in the wrong order
- A closing tag appears in the wrong context

Example:
```django
<div>Content</div>
{% endif %}  {# No corresponding {% if %} #}
```

Fix:
```django
{% if condition %}
    <div>Content</div>
{% endif %}
```
"""

[[rule]]
code = "S103"
category = "semantic"
error_type = "ValidationError::UnmatchedBlockName"
name = "Unmatched Block Name"
description = "endblock tag does not match any open block"
severity = "error"
explanation = """
This error occurs specifically with named blocks when the `{% endblock %}` tag
specifies a name that doesn't match any currently open block.

Example:
```django
{% block header %}
    <h1>Title</h1>
{% endblock footer %}  {# Name mismatch! #}
```

Fix:
```django
{% block header %}
    <h1>Title</h1>
{% endblock header %}
{# or simply #}
{% endblock %}
```
"""

[[rule]]
code = "S104"
category = "semantic"
# Note: Both MissingRequiredArguments and MissingArgument map to S104
error_type = "ValidationError::MissingRequiredArguments|ValidationError::MissingArgument"
name = "Missing Required Arguments"
description = "Template tag is missing required arguments"
severity = "error"
explanation = """
This error occurs when a template tag is called without all its required arguments.
Different Django template tags have different argument requirements.

Examples:
```django
{% extends %}  {# Missing template name #}
{% load %}     {# Missing library name #}
{% include %}  {# Missing template name #}
```

Fixes:
```django
{% extends "base.html" %}
{% load static %}
{% include "partials/header.html" %}
```
"""

[[rule]]
code = "S105"
category = "semantic"
error_type = "ValidationError::TooManyArguments"
name = "Too Many Arguments"
description = "Template tag received more arguments than expected"
severity = "error"
explanation = """
This error occurs when a template tag is called with more arguments than it accepts.
Each Django template tag has a specific signature defining the maximum number of
arguments it can receive.

Example:
```django
{% csrf_token extra_arg %}  {# csrf_token takes no arguments #}
{% now "Y-m-d" "extra" %}    {# now only takes one format string #}
```

Fix:
```django
{% csrf_token %}
{% now "Y-m-d" %}
```

Note: Some tags accept variable numbers of arguments using varargs. This error
only appears when you exceed the maximum even for varargs tags.
"""

[[rule]]
code = "S106"
category = "semantic"
error_type = "ValidationError::InvalidLiteralArgument"
name = "Invalid Literal Argument"
description = "Template tag argument must be a specific literal value"
severity = "error"
explanation = """
This error occurs when a template tag expects a specific literal keyword but receives
something else. Some Django tags require exact keyword matches at specific positions.

Example:
```django
{% for item on items %}  {# Should be 'in', not 'on' #}
    {{ item }}
{% endfor %}

{% if user is_not active %}  {# Should be 'not', not 'is_not' #}
    ...
{% endif %}
```

Fix:
```django
{% for item in items %}
    {{ item }}
{% endfor %}

{% if user is not active %}
    ...
{% endif %}
```
"""

[[rule]]
code = "S107"
category = "semantic"
error_type = "ValidationError::InvalidArgumentChoice"
name = "Invalid Argument Choice"
description = "Template tag argument must be one of a specific set of choices"
severity = "error"
explanation = """
This error occurs when a template tag argument must be one of a predefined set of
values, but receives something else. Unlike S106 which expects a single literal,
this applies when multiple valid options exist.

Example:
```django
{% cycle 'odd' 'even' as rowcolors silent=true %}  {# invalid; should be 'silent' without '=' #}

{% autoescape yes %}  {# valid #}
{% autoescape maybe %}  {# invalid - must be 'on' or 'off' #}
```

Fix:
```django
{% cycle 'odd' 'even' as rowcolors silent %}
{% autoescape on %}
```
"""
